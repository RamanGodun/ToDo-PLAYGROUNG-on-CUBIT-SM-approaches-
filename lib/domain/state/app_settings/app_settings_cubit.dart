import 'package:equatable/equatable.dart';
import 'package:hydrated_bloc/hydrated_bloc.dart';

import '../../app_constants/enums.dart';

part 'app_settings_state.dart';

/// üì¶ [AppSettingsCubit] - –∫–µ—Ä—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ —Ç–µ–º–∏ —Ç–∞ —Ç–∏–ø—É —Å—Ç–µ–π—Ç-—à–µ–π–ø—É.
/// –ó–±–µ—Ä—ñ–≥–∞—î –¥–∞–Ω—ñ —á–µ—Ä–µ–∑ HydratedCubit, —â–æ–± –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–µ –≥—É–±–∏–ª–∏—Å—è –ø—ñ—Å–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É.
class AppSettingsCubit extends HydratedCubit<AppSettingsState> {
  /// üÜï –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î –∫—É–±—ñ—Ç –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–º —Å—Ç–∞–Ω–æ–º –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–º.
  AppSettingsCubit() : super(AppSettingsState.initial());

  /// üîÅ –ü–µ—Ä–µ–º–∏–∫–∞—î –º—ñ–∂ **ListenerStateShape** —ñ **StreamSubscriptionStateShape**.
  void toggleStateShape() {
    final newStateShape = state.isUsingListenerStateShapeForAppFeatures
        ? AppStateShapeManagement.withStreamSubscription
        : AppStateShapeManagement.withListener;

    emit(state.copyWith(stateShapeManagement: newStateShape));
  }

  /// üé® –ü–µ—Ä–µ–º–∏–∫–∞—î —Ç–µ–º—É (—Å–≤—ñ—Ç–ª–∞/—Ç–µ–º–Ω–∞).
  void toggleTheme(bool isDarkMode) {
    emit(state.copyWith(isDarkTheme: isDarkMode));
  }

  /// üíæ –ó–±–µ—Ä—ñ–≥–∞—î —Å—Ç–∞–Ω —É JSON –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É.
  @override
  Map<String, dynamic>? toJson(AppSettingsState state) {
    return {
      'isUsingListenerStateShapeForAppFeatures':
          state.isUsingListenerStateShapeForAppFeatures,
      'isDarkTheme': state.isDarkTheme,
    };
  }

  /// üíæ –í—ñ–¥–Ω–æ–≤–ª—é—î —Å—Ç–∞–Ω —ñ–∑ JSON –ø—ñ—Å–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç—É –¥–æ–¥–∞—Ç–∫—É.
  @override
  AppSettingsState? fromJson(Map<String, dynamic> json) {
    return AppSettingsState(
      stateShapeManagement:
          (json['isUsingListenerStateShapeForAppFeatures'] as bool? ?? true)
              ? AppStateShapeManagement.withListener
              : AppStateShapeManagement.withStreamSubscription,
      isDarkTheme: json['isDarkTheme'] as bool? ?? false,
    );
  }
}
